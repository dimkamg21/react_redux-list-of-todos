{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","filter","toLowerCase","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","filterParams","dispatch","filteredTodos","useMemo","newTodos","title","includes","completed","length","className","map","id","onClick","setCurrentTodo","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","actionsFilter","placeholder","newQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","finally","href","email","name","App","todoFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.79af9f0f.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetFilterAction = { type: 'filter/STATUS', payload: Status };\ntype SetQueryAction = { type: 'filter/QUERY', payload: string };\n\ntype Action = SetFilterAction | SetQueryAction;\n\nconst setFilter = (status: Status): SetFilterAction => ({\n  type: 'filter/STATUS', payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/QUERY',\n  payload: query,\n});\n\nexport const actions = { setQuery, setFilter };\n\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst initialState = {\n  query: '',\n  status: 'all' as Status,\n};\n\nconst filterReducer = (filter: State = initialState, action: Action) => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return {\n        ...filter,\n        status: action.payload,\n      };\n\n    case 'filter/QUERY':\n      return {\n        ...filter,\n        query: action.payload.toLowerCase(),\n      };\n\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst set = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { set };\n\nconst todosReducer = (todos: Todo[] = [], action: SetAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const filterParams = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useAppDispatch();\n\n  const setCurrentTodo = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  const { query, status } = filterParams;\n\n  const filteredTodos = useMemo(() => {\n    let newTodos = [...todos];\n\n    if (query) {\n      newTodos = newTodos.filter(\n        todo => todo.title.toLowerCase().includes(query),\n      );\n    }\n\n    switch (status) {\n      case 'active':\n        return newTodos.filter(todo => !todo.completed);\n\n      case 'completed':\n        return newTodos.filter(todo => todo.completed);\n\n      default:\n        return newTodos;\n    }\n  }, [status, query]);\n\n  return (\n    <>\n      {!filteredTodos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.map(todo => (\n            <tr data-cy=\"todo\">\n              <td className=\"is-vcentered\">{todo.id}</td>\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={!todo.completed ? 'has-text-danger' : 'has-text-success'}>{todo.title}</p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button data-cy=\"selectButton\" className=\"button\" type=\"button\" onClick={() => setCurrentTodo(todo)}>\n                  <span className=\"icon\">\n                    {currentTodo?.id === todo.id ? <i className=\"far fa-eye-slash\" /> : <i className=\"far fa-eye\" />}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          ))}\n\n          {/* <tr data-cy=\"todo\" className=\"has-background-info-light\">\n            <td className=\"is-vcentered\">3</td>\n            <td className=\"is-vcentered\"> </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className=\"has-text-danger\">fugiat veniam minus</p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                <span className=\"icon\">\n                  <i className=\"far fa-eye-slash\" />\n                </span>\n              </button>\n            </td>\n          </tr> */}\n\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsFilter } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const query = useAppSelector(state => state.filter.query);\n  const dispatch = useAppDispatch();\n\n  const handleQueryChange = (newQuery: string) => {\n    dispatch(actionsFilter.setQuery(newQuery));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(actionsFilter.setQuery(''));\n  };\n\n  const handleStatusChange = (status: Status) => {\n    dispatch(actionsFilter.setFilter(status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              handleStatusChange(event.target.value as Status);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          value={query}\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={event => handleQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          {query.length > 0\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                aria-label=\"Clear Search\"\n                onClick={handleQueryClear}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const removeCurrentTodo = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => removeCurrentTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\n// import { useSelector } from 'react-redux';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((todoFromServer) => dispatch(actions.set(todoFromServer)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            {isLoading && (<Loader />)}\n\n            {!!todos.length && (\n              <div className=\"block\">\n                <TodoList />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}